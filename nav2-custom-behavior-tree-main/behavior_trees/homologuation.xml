<?xml version="1.0"?>
<root main_tree_to_execute="full_match">
    <!-- ////////// -->
    <BehaviorTree ID="ClearPath">
        <Sequence>
            <Control ID="RecoveryNode" number_of_retries="2">
                <Action ID="TouchWall" error_code_id="{touch_wall_error}" server_name="/touch_wall" server_timeout="50" speed="0.1" time_allowance="10"/>
                <SubTree ID="HandleTouchWallError" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
            </Control>
            <Action ID="BackUp" backup_dist="0.09" backup_speed="0.1" error_code_id="{backup_error}" server_name="/backup" server_timeout="50" time_allowance="10"/>
            <Fallback>
                <BlackboardCheckBool return_on_mismatch="FAILURE" value_A="{is_approach_pose_to_the_left}" value_B="true">
                    <Action ID="Spin" error_code_id="{spin_error}" server_name="/spin" server_timeout="50" spin_dist="-1.571" time_allowance="10"/>
                </BlackboardCheckBool>
                <Action ID="Spin" error_code_id="{spin_error}" server_name="/spin" server_timeout="50" spin_dist="1.571" time_allowance="10"/>
            </Fallback>
            <Action ID="DriveOnHeading" dist_to_travel="0.55" error_code_id="{drive_error}" server_name="/drive_on_heading" server_timeout="50" speed="0.1" time_allowance="10"/>
            <Action ID="BackUp" backup_dist="0.1625" backup_speed="0.1" error_code_id="{backup_error}" server_name="/backup" server_timeout="50" time_allowance="10"/>
            <Fallback>
                <BlackboardCheckBool return_on_mismatch="FAILURE" value_A="{is_approach_pose_to_the_left}" value_B="true">
                    <Action ID="Spin" error_code_id="{spin_error}" server_name="/spin" server_timeout="50" spin_dist="1.571" time_allowance="10"/>
                </BlackboardCheckBool>
                <Action ID="Spin" error_code_id="{spin_error}" server_name="/spin" server_timeout="50" spin_dist="-1.571" time_allowance="10"/>
            </Fallback>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="DropPlantsSubTree">
        <Sequence>
            <RetryUntilSuccessful num_attempts="2">
                <Sequence name="">
                    <RetryUntilSuccessful num_attempts="3">
                        <Action ID="GetNearestPlanter" is_approach_pose="{is_approach_pose}" is_approach_pose_to_the_left="{is_approach_pose_to_the_left}" planter_pos="{planter}" server_timeout="50" service_name="/table/get_nearest_planter"/>
                    </RetryUntilSuccessful>
                    <Control ID="RecoveryNode" number_of_retries="2">
                        <Action ID="NavigateToPose" behavior_tree="" error_code_id="{nav_to_pose_error}" goal="{planter}" server_name="/navigate_to_pose" server_timeout="50"/>
                        <SubTree ID="HandleNavToPoseError" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
                    </Control>
                    <RetryUntilSuccessful num_attempts="3">
                        <Action ID="ReduceFootprint" reduced="true" server_timeout="50" service_name="/reduce_footprint"/>
                    </RetryUntilSuccessful>
                    <BlackboardCheckBool return_on_mismatch="SUCCESS" value_A="{is_approach_pose}" value_B="true">
                        <SubTree ID="ClearPath" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
                    </BlackboardCheckBool>
                    <Control ID="RecoveryNode" number_of_retries="2">
                        <Action ID="TouchWall" error_code_id="{touch_wall_error}" server_name="/touch_wall" server_timeout="50" speed="0.1" time_allowance="10"/>
                        <SubTree ID="HandleTouchWallError" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
                    </Control>
                </Sequence>
            </RetryUntilSuccessful>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="MovePince" server_timeout="50" service_name="/pince/up" up="false"/>
            </RetryUntilSuccessful>
            <Delay delay_msec="500">
                <RetryUntilSuccessful name="" num_attempts="3">
                    <Action ID="EnablePince" enable="true" server_timeout="50" service_name="/pince/enable"/>
                </RetryUntilSuccessful>
            </Delay>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="OpenPince" open="true" server_timeout="50" service_name="/pince/open"/>
            </RetryUntilSuccessful>
            <Action ID="BackUp" backup_dist="0.2" backup_speed="0.2" error_code_id="{backup_error}" server_name="/backup" server_timeout="50" time_allowance="10"/>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="EnablePince" enable="false" server_timeout="50" service_name="/pince/enable"/>
            </RetryUntilSuccessful>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="ReduceFootprint" reduced="false" server_timeout="50" service_name="/reduce_footprint"/>
            </RetryUntilSuccessful>
            <Action ID="DropPlants" num_plants="6" server_timeout="50" service_name="/table/drop_plants"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GrabPlants">
        <Sequence>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="GetNearestPlants" plants_pos="{goal}" server_timeout="50" service_name="/table/get_nearest_plants"/>
            </RetryUntilSuccessful>
            <Action ID="NavigateToPose" behavior_tree="" error_code_id="{nav_to_pose_error}" goal="{goal}" server_name="/navigate_to_pose" server_timeout="50"/>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="OpenPince" open="false" server_timeout="50" service_name="/pince/open"/>
            </RetryUntilSuccessful>
            <Delay delay_msec="200">
                <RetryUntilSuccessful num_attempts="3">
                    <Action ID="MovePince" server_timeout="50" service_name="/pince/up" up="true"/>
                </RetryUntilSuccessful>
            </Delay>
            <Action ID="UpdatePlantsStatus" is_taken="true" server_timeout="50" service_name="/table/update_plants_status"/>
            <Action ID="BackUp" backup_dist="0.2" backup_speed="0.4" error_code_id="{backup_error}" server_name="/backup" server_timeout="50" time_allowance="5"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="GrabPlantsCameraCheck">
        <Control ID="RecoveryNode" number_of_retries="3">
            <Sequence>
                <RetryUntilSuccessful num_attempts="3">
                    <Action ID="GetNearestPlantsApproachPosition" approach_plants_pos="{goal}" server_timeout="50" service_name="/table/get_nearest_plants_approach_position"/>
                </RetryUntilSuccessful>
                <Action ID="NavigateToPose" behavior_tree="" error_code_id="{nav_to_pose_error}" goal="{goal}" server_name="/navigate_to_pose" server_timeout="50"/>
                <Sequence>
                    <Action ID="GetPlantsMeanPose" mean_pose="{plants_mean_pose}" num_plants="{num_plants}" server_timeout="250" service_name="/camera/get_plants_mean_pose"/>
                    <BlackboardCheckInt name="" return_on_mismatch="SUCCESS" value_A="{plants_mean_pose}" value_B="0">
                        <AlwaysFailure name=""/>
                    </BlackboardCheckInt>
                </Sequence>
                <Action ID="NavigateToPose" behavior_tree="" error_code_id="{nav_to_pose_error}" goal="{plants_mean_pose]" name="" server_name="/navigate_to_pose" server_timeout="50"/>
                <RetryUntilSuccessful num_attempts="3">
                    <Action ID="OpenPince" open="false" server_timeout="50" service_name="/pince/open"/>
                </RetryUntilSuccessful>
                <RetryUntilSuccessful num_attempts="3">
                    <Action ID="MovePince" server_timeout="50" service_name="/pince/up" up="true"/>
                </RetryUntilSuccessful>
            </Sequence>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="UpdatePlantsStatus" is_taken="true" server_timeout="50" service_name="/table/update_plants_status"/>
            </RetryUntilSuccessful>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HandleNavToPoseError">
        <Action ID="Wait" name="" server_name="/wait" server_timeout="50" wait_duration="1.0"/>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="HandleTouchWallError">
        <IfThenElse>
            <Condition ID="AreErrorCodesPresent" error_code="{touch_wall_error}" error_codes_to_check="703"/>
            <Action ID="UpdateApproachPosition" is_free="false" server_timeout="50" service_name="/table/update_approach_position"/>
            <Action ID="Wait" server_name="/wait" server_timeout="50" wait_duration="1.0"/>
        </IfThenElse>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="MatchEnd">
        <Control ID="RecoveryNode" number_of_retries="2">
            <Sequence>
                <RetryUntilSuccessful num_attempts="3">
                    <Action ID="GetNearestEndZone" server_timeout="50" service_name="/table/get_nearest_end_zone" zone_pos="{end_zone}"/>
                </RetryUntilSuccessful>
                <Action ID="NavigateToPose" behavior_tree="" error_code_id="{nav_to_pose_error}" goal="{end_zone}" server_name="/navigate_to_pose" server_timeout="50"/>
            </Sequence>
            <Control ID="RoundRobin">
                <Action ID="BackUp" backup_dist="0.1" backup_speed="0.1" error_code_id="{backup_error}" server_name="/backup" server_timeout="50" time_allowance="10"/>
                <Action ID="Spin" error_code_id="{spin_error}" server_name="/spin" server_timeout="50" spin_dist="1.57" time_allowance="5"/>
            </Control>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="SolarPanels">
        <Sequence>
            <RetryUntilSuccessful num_attempts="3">
                <Action ID="TurnSolarPanel" server_timeout="50" service_name="/solar_panel/turn" turn="true"/>
            </RetryUntilSuccessful>
            <ForceSuccess>
                <Action ID="DriveOnHeading" dist_to_travel="0.5" error_code_id="{drive_error}" server_name="/drive_on_heading" server_timeout="50" speed="0.4" time_allowance="10"/>
            </ForceSuccess>
            <RetryUntilSuccessful name="" num_attempts="3">
                <Action ID="TurnSolarPanel" name="" server_timeout="50" service_name="/solar_panel/turn" turn="false"/>
            </RetryUntilSuccessful>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="full_match">
        <SequenceStar>
            <SubTree ID="GrabPlants" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
            <SubTree ID="DropPlantsSubTree" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
            <SubTree ID="MatchEnd" __shared_blackboard="true" bt_loop_duration="bt_loop_duration" node="node" server_timeout="server_timeout"/>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Condition ID="AreErrorCodesPresent">
            <input_port name="error_code" type="unsigned short">The active error codes</input_port>
            <input_port name="error_codes_to_check" type="std::set&lt;unsigned short, std::less&lt;unsigned short&gt;, std::allocator&lt;unsigned short&gt; &gt;">Error codes to check</input_port>
        </Condition>
        <Action ID="AssistedTeleop">
            <output_port name="error_code_id">Assisted teleop error code</output_port>
            <input_port name="is_recovery">If true recovery count will be incremented</input_port>
            <input_port name="server_name">Service name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="time_allowance">Allowed time for spinning</input_port>
        </Action>
        <Action ID="BackUp">
            <input_port name="backup_dist" type="double">Distance to backup</input_port>
            <input_port name="backup_speed" type="double">Speed at which to backup</input_port>
            <output_port name="error_code_id" type="unsigned short">The back up behavior server error code</output_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="time_allowance" type="double">Allowed time for reversing</input_port>
        </Action>
        <Action ID="CancelAssistedTeleop">
            <input_port name="server_name">Server name to cancel the assisted teleop behavior</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="CancelBackUp">
            <input_port name="server_name">Server name to cancel the backup behavior</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="CancelControl">
            <input_port name="server_name">Server name to cancel the controller server</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="CancelDriveOnHeading">
            <input_port name="server_name">Service name to cancel the drive on heading behavior</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="CancelSpin">
            <input_port name="server_name">Server name to cancel the spin behavior</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="CancelWait">
            <input_port name="server_name">Server name to cancel the wait behavior</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="ClearCostmapAroundRobot">
            <input_port name="reset_distance">Distance from the robot under which obstacles are cleared</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="ClearCostmapExceptRegion">
            <input_port name="reset_distance">Distance from the robot above which obstacles are cleared</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="ClearEntireCostmap">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <SubTree ID="ClearPath">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <Action ID="ComputePathThroughPoses">
            <output_port name="error_code_id">&quot;Compute path through poses error code&quot;</output_port>
            <input_port name="goals">Destinations to plan through</input_port>
            <output_port name="path">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id">Mapped name to the planner plugin type to use</input_port>
            <input_port name="server_name">Server name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="start">Start pose of the path if overriding current robot pose</input_port>
        </Action>
        <Action ID="ComputePathToPose">
            <output_port name="error_code_id">&quot;Compute path to pose error code&quot;</output_port>
            <input_port name="goal">Destination to plan to</input_port>
            <output_port name="path">Path created by ComputePathToPose node</output_port>
            <input_port name="planner_id">Mapped name to the planner plugin type to use</input_port>
            <input_port name="server_name">Server name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="start">Start pose of the path if overriding current robot pose</input_port>
        </Action>
        <Action ID="ControllerSelector">
            <input_port name="default_controller">Default controller of the controller selector</input_port>
            <output_port name="selected_controller">Name of the selected controller received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive controller selection commands</input_port>
        </Action>
        <Action ID="DetectObstacles">
            <output_port name="obstacles_present">Are there obstacles in front of the robot</output_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Decorator ID="DistanceController">
            <input_port name="distance">Distance</input_port>
            <input_port name="global_frame">Reference frame</input_port>
            <input_port name="robot_base_frame">Robot base frame</input_port>
        </Decorator>
        <Condition ID="DistanceTraveled">
            <input_port name="distance">Distance to check if passed</input_port>
            <input_port name="global_frame">reference frame to check in</input_port>
            <input_port name="robot_base_frame">Robot frame to check relative to global_frame</input_port>
        </Condition>
        <Action ID="DriveOnHeading">
            <input_port name="dist_to_travel" type="double">Distance to travel</input_port>
            <output_port name="error_code_id" type="unsigned short">The drive on heading behavior server error code</output_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="speed" type="double">Speed at which to travel</input_port>
            <input_port name="time_allowance" type="double">Allowed time for driving on heading</input_port>
        </Action>
        <Action ID="DropPlants">
            <input_port name="num_plants" type="int">Number of plants dropped in the nearest planter</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <SubTree ID="DropPlantsSubTree">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <Action ID="EnablePince">
            <input_port name="enable" type="bool">Enable the pince</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Action ID="EnablePwm">
            <input_port name="enable">Enable the robot motors or not</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="FollowPath">
            <input_port default="FollowPath" name="controller_id"/>
            <output_port name="error_code_id">Follow Path error code</output_port>
            <input_port name="goal_checker_id">Goal checker</input_port>
            <input_port name="path">Path to follow</input_port>
            <input_port name="progress_checker_id">Progress checker</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="GetNearestEndZone">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
            <output_port name="zone_pos">Pose of the end zone</output_port>
        </Action>
        <Action ID="GetNearestPlanter">
            <output_port name="is_approach_pose" type="bool">If planter_pos is an approach position or not</output_port>
            <output_port name="is_approach_pose_to_the_left" type="bool">If it's an approach position, whether it's to the left of the planter or not</output_port>
            <output_port name="planter_pos" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Pose of the nearest planter</output_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Action ID="GetNearestPlants">
            <output_port name="plants_pos" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Pose of the nearest plants</output_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Action ID="GetNearestPlantsApproachPosition">
            <output_port name="approach_plants_pos">Approach pose in front of the nearest plants</output_port>
            <input_port default="100" name="server_timeout">Server timeout</input_port>
            <input_port default="/table/get_nearest_plants_approach_position" name="service_name">Service name</input_port>
        </Action>
        <Action ID="GetPlantsMeanPose">
            <output_port default="{plants_mean_pose}" name="mean_pose">Get the mean position of plants in front of the robot</output_port>
            <output_port default="{num_plants}" name="num_plants">How many plants were detected</output_port>
            <input_port default="250" name="server_timeout">Server timeout</input_port>
            <input_port default="/camera/get_plants_mean_pose" name="service_name">Service name</input_port>
        </Action>
        <Condition ID="GlobalUpdatedGoal"/>
        <Action ID="GoalCheckerSelector">
            <input_port name="default_goal_checker">Default goal checker of the controller selector</input_port>
            <output_port name="selected_goal_checker">Name of the selected goal checker received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive goal checker selection commands</input_port>
        </Action>
        <Condition ID="GoalReached">
            <input_port name="global_frame">Reference frame</input_port>
            <input_port name="goal">Destination</input_port>
            <input_port name="robot_base_frame">Robot base frame</input_port>
        </Condition>
        <Condition ID="GoalUpdated"/>
        <Decorator ID="GoalUpdatedController"/>
        <Decorator ID="GoalUpdater">
            <input_port name="input_goal">Original goal in</input_port>
            <output_port name="output_goal">Output goal set by subscription</output_port>
        </Decorator>
        <SubTree ID="GrabPlants">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <SubTree ID="GrabPlantsCameraCheck">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <SubTree ID="HandleNavToPoseError">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <SubTree ID="HandleTouchWallError">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <Condition ID="InitialPoseReceived"/>
        <Condition ID="IsBatteryCharging">
            <input_port name="battery_topic">Topic for battery info</input_port>
        </Condition>
        <Condition ID="IsBatteryLow">
            <input_port name="battery_topic">Topic for battery info</input_port>
            <input_port name="is_voltage">Bool if check based on voltage or total %</input_port>
            <input_port name="min_battery">Min battery % or voltage before triggering</input_port>
        </Condition>
        <Condition ID="IsPathValid">
            <input_port name="path"> Path to validate </input_port>
            <input_port name="server_timeout"> Server timeout </input_port>
        </Condition>
        <Condition ID="IsStuck"/>
        <SubTree ID="MatchEnd">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <Action ID="MovePince">
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
            <input_port name="up" type="bool">Move the pince up</input_port>
        </Action>
        <Action ID="NavigateThroughPoses">
            <input_port name="behavior_tree">Behavior tree to run</input_port>
            <output_port name="error_code_id">Navigate through poses error code</output_port>
            <input_port name="goals">Goals</input_port>
            <input_port name="server_name">Server name</input_port>
            <input_port name="server_timeout">Server timeout</input_port>
        </Action>
        <Action ID="NavigateToPose">
            <input_port name="behavior_tree" type="std::string">Behavior tree to run</input_port>
            <output_port name="error_code_id" type="unsigned short">Navigate to pose error code</output_port>
            <input_port name="goal" type="geometry_msgs::msg::PoseStamped_&lt;std::allocator&lt;void&gt; &gt;">Destination to plan to</input_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
        </Action>
        <Action ID="OpenPince">
            <input_port name="open" type="bool">Open the pince</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Condition ID="PathExpiringTimer">
            <input_port name="path">Check if path has been updated to enable timer reset</input_port>
            <input_port name="seconds">Time to check if expired</input_port>
        </Condition>
        <Decorator ID="PathLongerOnApproach">
            <input_port name="length_factor">Length multiplication factor to check if the path is significantly longer </input_port>
            <input_port name="path">Planned Path</input_port>
            <input_port name="prox_len">Proximity length (m) for the path to be longer on approach</input_port>
        </Decorator>
        <Control ID="PipelineSequence"/>
        <Action ID="PlannerSelector">
            <input_port name="default_planner">Default planner of the planner selector</input_port>
            <output_port name="selected_planner">Name of the selected planner received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive planner selection commands</input_port>
        </Action>
        <Action ID="ProgressCheckerSelector">
            <input_port name="default_progress_checker">Default progress checker of the controller selector</input_port>
            <output_port name="selected_progress_checker">Name of the selected progress checker received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive progress checker selection commands</input_port>
        </Action>
        <Decorator ID="RateController">
            <input_port name="hz">Rate</input_port>
        </Decorator>
        <Control ID="RecoveryNode">
            <input_port name="number_of_retries" type="int">Number of retries</input_port>
        </Control>
        <Action ID="ReduceFootprint">
            <input_port name="reduced" type="bool">Reduce the footprint or not</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Action ID="ReinitializeGlobalLocalization">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Action ID="RemovePassedGoals">
            <input_port name="global_frame">Global frame</input_port>
            <input_port name="input_goals">Input goals to remove if passed</input_port>
            <output_port name="output_goals">Set of goals after removing any passed</output_port>
            <input_port name="radius">Radius tolerance on a goal to consider it passed</input_port>
            <input_port name="robot_base_frame">Robot base frame</input_port>
        </Action>
        <Control ID="RoundRobin"/>
        <Decorator ID="SingleTrigger"/>
        <Action ID="SmoothPath">
            <input_port name="check_for_collisions">Bool if collision check should be performed</input_port>
            <input_port name="max_smoothing_duration">Maximum smoothing duration</input_port>
            <output_port name="smoothed_path">Smoothed path</output_port>
            <input_port default="SmoothPath" name="smoother_id"/>
            <output_port name="smoothing_duration">Smoothing duration</output_port>
            <input_port name="unsmoothed_path">Path to be smoothed</input_port>
            <output_port name="was_completed">True if smoothing was not interrupted by time limit</output_port>
        </Action>
        <Action ID="SmootherSelector">
            <input_port name="default_smoother">Default smoother of the smoother selector</input_port>
            <output_port name="selected_smoother">Name of the selected smoother received from the topic subcription</output_port>
            <input_port name="topic_name">Name of the topic to receive smoother selection commands</input_port>
        </Action>
        <SubTree ID="SolarPanels">
            <input_port default="true" name="__shared_blackboard">If false (default), the Subtree has an isolated blackboard and needs port remapping</input_port>
            <inout_port default="bt_loop_duration" name="bt_loop_duration"/>
            <inout_port default="node" name="node"/>
            <inout_port default="server_timeout" name="server_timeout"/>
        </SubTree>
        <Decorator ID="SpeedController">
            <input_port name="max_rate">Maximum rate</input_port>
            <input_port name="max_speed">Maximum speed</input_port>
            <input_port name="min_rate">Minimum rate</input_port>
            <input_port name="min_speed">Minimum speed</input_port>
        </Decorator>
        <Action ID="Spin">
            <output_port name="error_code_id" type="unsigned short">The spin behavior error code</output_port>
            <input_port name="is_recovery" type="bool">True if recovery</input_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="spin_dist" type="double">Spin distance</input_port>
            <input_port name="time_allowance" type="double">Allowed time for spinning</input_port>
        </Action>
        <Action ID="TakePlants">
            <input_port name="server_timeout">Server timeout</input_port>
            <input_port name="service_name">Service name</input_port>
        </Action>
        <Condition ID="TimeExpired">
            <input_port name="seconds" type="double">Seconds</input_port>
        </Condition>
        <Action ID="TouchWall">
            <output_port name="error_code_id" type="unsigned short">Error code id</output_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="speed" type="float">Speed of the robot when touching the wall</input_port>
            <input_port name="time_allowance" type="int">Time allowance for the action to complete (in seconds)</input_port>
            <input_port name="wall" type="int">Wall to touch (-1, 0, 1, 2, 3)</input_port>
        </Action>
        <Condition ID="TransformAvailable">
            <input_port name="child">Child frame for transform</input_port>
            <input_port name="parent">Parent frame for transform</input_port>
        </Condition>
        <Action ID="TruncatePath">
            <input_port name="distance">Distance before goal to truncate</input_port>
            <input_port name="input_path">Path to truncate</input_port>
            <output_port name="output_path">Truncated path to utilize</output_port>
        </Action>
        <Action ID="TruncatePathLocal">
            <input_port name="angular_distance_weight">Weight of angular distance relative to positional distance when finding which path pose is closest to robot. Not applicable on paths without orientations assigned</input_port>
            <input_port name="distance_backward">Distance in backward direction</input_port>
            <input_port name="distance_forward">Distance in forward direction</input_port>
            <input_port name="max_robot_pose_search_dist">Maximum forward integrated distance along the path (starting from the last detected pose) to bound the search for the closest pose to the robot. When set to infinity (default), whole path is searched every time</input_port>
            <output_port name="output_path">Truncated path to utilize</output_port>
            <input_port name="pose">Manually specified pose to be used if overriding current robot pose</input_port>
            <input_port name="robot_frame">Robot base frame id</input_port>
            <input_port name="transform_tolerance">Transform lookup tolerance</input_port>
        </Action>
        <Action ID="TurnSolarPanel">
            <input_port default="100" name="server_timeout">Server timeout</input_port>
            <input_port default="/solar_panel/turn" name="service_name">Service name</input_port>
            <input_port name="turn">Turn solar panels or not</input_port>
        </Action>
        <Action ID="UpdateApproachPosition">
            <input_port name="is_free" type="bool">Is the nearest planter approach position free</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Action ID="UpdatePlantsStatus">
            <input_port name="is_taken" type="bool">Is the nearest group of plants taken</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="service_name" type="std::string">please_set_service_name_in_BT_Node</input_port>
        </Action>
        <Action ID="Wait">
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="wait_duration" type="int">Wait time</input_port>
        </Action>
        <Condition ID="WouldAControllerRecoveryHelp">
            <input_port name="error_code">Error code</input_port>
        </Condition>
        <Condition ID="WouldAPlannerRecoveryHelp">
            <input_port name="error_code">Error code</input_port>
        </Condition>
        <Condition ID="WouldASmootherRecoveryHelp">
            <input_port name="error_code">Error code</input_port>
        </Condition>
    </TreeNodesModel>
    <!-- ////////// -->
</root>
